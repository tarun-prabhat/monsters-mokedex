{"version":3,"sources":["Component/card/card.jsx","Component/card-list/card-list.jsx","Component/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","fileteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAY,iBAAjB,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,gCACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHXC,G,MAAW,SAAAR,GAEtB,OADAS,QAAQC,IAAIV,GACJ,sBAAKC,UAAU,YAAf,qBACND,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,YCLZQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,qBAAKd,UAAU,SAAf,SACE,uBAAOe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,QCoC9CG,G,wDAnCb,aAAc,IAAD,8BACX,gBAQFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAPpC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAY,IALH,E,qDAYb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBAExC,WAAS,IAAD,EACyBC,KAAKN,MAA7Bb,EADD,EACCA,SAASU,EADV,EACUA,YACVU,EAAoBpB,EAASqB,QAAO,SAAA5B,GAAO,OAC/CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACAa,YAAY,kBACZC,aAAgBe,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.aaff32e1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\nexport const Card = (props) => {\r\n  return(\r\n    <div className = 'card-container'>\r\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}.png?set=set2&size=180x180`}/>\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {Card} from '../card/card'\r\nimport './card-list.css'\r\n \r\nexport const CardList = props =>{\r\n  console.log(props)\r\n  return (<div className='card-list'>        {\r\n    props.monsters.map(monster=>\r\n      <Card key={monster.id} monster={monster}/>)\r\n  }</div>)\r\n}","import React from 'react';\r\nimport './search-box.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) =>(\r\n  <div className='search'>\r\n    <input type='search' placeholder={placeholder} onChange={handleChange}/>\r\n  </div>\r\n  \r\n)","import React,{Component} from 'react';\nimport {CardList} from './Component/card-list/card-list';\nimport {SearchBox} from './Component/search-box/search-box';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n\n  }\n  handleChange = (e) =>{\n    this.setState({searchField:e.target.value})\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users=> this.setState({monsters:users}));\n  }\n  render(){\n    const {monsters,searchField }= this.state;\n    const fileteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Mokedex</h1>\n        <SearchBox\n        placeholder='search monsters'\n        handleChange = {this.handleChange}\n        />\n        <CardList monsters={fileteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}